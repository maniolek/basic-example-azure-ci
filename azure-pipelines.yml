trigger:
  - main

parameters:
  - name: NodeVersion
    displayName: Node.js Version
    type: string
    default: '16.x'
    values:
      - 16.x
      - 18.x

variables:
  dockerRegistryServiceConnection: '934ab605-b29a-4f83-a326-63a54960a971'
  imageRepository: 'vmd-front'
  containerRegistry: 'vmddev.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'

stages:
  - stage: ValidatePR
    condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest'))
    displayName: Validate PR
    jobs:
      - job: BuildApplication
        displayName: Build Application
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: ${{ parameters.NodeVersion }}
          - script: 'npm install'
            displayName: 'NPM Install'
          - task: Npm@1
            displayName: 'Lint application'
            inputs:
              command: custom
              customCommand: 'run lint'
          - task: Npm@1
            displayName: 'Build NX application'
            inputs:
              command: custom
              customCommand: 'run build'
          - task: Npm@1
            displayName: 'Run tests'
            inputs:
              command: custom
              customCommand: 'run test'
          - task: PublishTestResults@2
            inputs:
              searchFolder: $(System.DefaultWorkingDirectory)/coverage
              testResultsFiles: '**/junit.xml'
              mergeTestResults: true
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/combined-coverage.xml

  - stage: BuildTest
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    dependsOn: [ ]
    displayName: 'Build application for Test Environment'
    jobs:
      - job: BuildTestApp
        displayName: Build App
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '16.x'
          - script: 'npm install'
            displayName: 'NPM Install'
          - task: Npm@1
            displayName: 'Lint application'
            inputs:
              command: custom
              customCommand: 'run lint'
          - task: Npm@1
            displayName: 'Build NX application'
            inputs:
              command: custom
              customCommand: 'run build'
          - task: Npm@1
            displayName: 'Run tests'
            inputs:
              command: custom
              customCommand: 'run test:coverage'
          - task: PublishTestResults@2
            inputs:
              searchFolder: $(System.DefaultWorkingDirectory)/coverage
              testResultsFiles: '**/junit.xml'
              mergeTestResults: true
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/combined-coverage.xml

  - stage: DeploymentTestImage
    displayName: Deploy Docker Image for Test
    jobs:
      - deployment: TestRelease
        displayName: 'Deployment Process'
        environment: 'VMD-TEST'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: Docker@2
                  displayName: Build
                  inputs:
                    command: build
                    containerRegistry: $(dockerRegistryServiceConnection)
                    repository: $(imageRepository)
                    dockerfile: $(dockerfilePath)
                    tags: 'test'
                    arguments: --build-arg APP_BUILD_COMMAND="build:test"
                - task: Docker@2
                  displayName: Push
                  inputs:
                    command: push
                    containerRegistry: $(dockerRegistryServiceConnection)
                    repository: $(imageRepository)
                    tags: 'test'
                - task: AzureAppServiceManage@0
                  inputs:
                    azureSubscription: 'VMDRessourceGroupConnection'
                    action: 'Restart Azure App Service'
                    webAppName: 'vmd-frontend'

  - stage: DeploymentQAImage
    displayName: Deploy Docker Image for QA
    dependsOn: DeploymentTestImage
    jobs:
      - deployment: QaRelease
        displayName: 'Deployment Process'
        environment: 'VMD-QA'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: Docker@2
                  displayName: Build
                  inputs:
                    command: build
                    containerRegistry: $(dockerRegistryServiceConnection)
                    repository: $(imageRepository)
                    dockerfile: $(dockerfilePath)
                    tags: 'qa'
                    arguments: --build-arg APP_BUILD_COMMAND="build:qa"
                - task: Docker@2
                  displayName: Push
                  inputs:
                    command: push
                    containerRegistry: $(dockerRegistryServiceConnection)
                    repository: $(imageRepository)
                    tags: 'qa'
                - task: AzureAppServiceManage@0
                  inputs:
                    azureSubscription: 'VMDRessourceGroupConnection'
                    action: 'Restart Azure App Service'
                    webAppName: 'vmd-frontend-qa'

  - stage: DeploymentLatestImage
    displayName: Deploy LATEST Docker Image
    dependsOn: DeploymentQAImage
    jobs:
      - deployment: ProdRelease
        displayName: 'Deployment Process'
        environment: 'VMD-PROD'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: Docker@2
                  displayName: Build and push an image to container registry
                  inputs:
                    command: buildAndPush
                    containerRegistry: $(dockerRegistryServiceConnection)
                    repository: $(imageRepository)
                    dockerfile: $(dockerfilePath)
                    tags: 'latest'
