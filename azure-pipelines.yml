trigger:
  - main

parameters:
  - name: NodeVersion
    displayName: Node.js Version
    type: string
    default: '16.x'
    values:
      - 16.x
      - 18.x

variables:
  azureSubscription: '009e80bd-57d1-4575-85c2-b3db5596b394'
  dockerRegistryServiceConnection: '934ab844-11b2-1f83-a326-63a54960a971'
  imageRepository: 'fancyapp'
  containerRegistry: 'fancyapp.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'

stages:
  - stage: ValidatePR
    condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'PullRequest'))
    displayName: Validate PR
    jobs:
      - job: BuildApplication
        displayName: Build Application
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: ${{ parameters.NodeVersion }}
          - script: 'npm install'
            displayName: 'NPM Install'
          - task: Npm@1
            displayName: 'Lint application'
            inputs:
              command: custom
              customCommand: 'run lint'
          - task: Npm@1
            displayName: 'Build NX application'
            inputs:
              command: custom
              customCommand: 'run build'
          - task: Npm@1
            displayName: 'Run tests with code coverage'
            inputs:
              command: custom
              customCommand: 'run test'
          - task: PublishTestResults@2
            inputs:
              searchFolder: $(System.DefaultWorkingDirectory)/coverage
              testResultsFiles: '**/junit.xml'
              mergeTestResults: true
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/combined-coverage.xml

  - stage: BuildTest
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    dependsOn: [ ]
    displayName: 'Build application for Test Environment'
    jobs:
      - job: BuildTestApp
        displayName: Build App
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: '16.x'
          - script: 'npm install'
            displayName: 'NPM Install'
          - task: Npm@1
            displayName: 'Lint application'
            inputs:
              command: custom
              customCommand: 'run lint'
          - task: Npm@1
            displayName: 'Build NX application'
            inputs:
              command: custom
              customCommand: 'run build'
          - task: Npm@1
            displayName: 'Run tests with code coverage'
            inputs:
              command: custom
              customCommand: 'run test:coverage'
          - task: PublishTestResults@2
            inputs:
              searchFolder: $(System.DefaultWorkingDirectory)/coverage
              testResultsFiles: '**/junit.xml'
              mergeTestResults: true
          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/combined-coverage.xml
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist/fancy-app/'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              ArtifactName: 'drop'

  - stage: DeploymentTestImage
    dependsOn: [ BuildTest ]
    displayName: Deploy Docker Image for Test
    jobs:
      - deployment: TestRelease
        displayName: 'Deployment Process'
        environment: 'FancyApp-Test'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebApp@1
                  displayName: 'Deploy App Service'
                  inputs:
                    azureSubscription: ${{ variables['azureSubscription'] }}
                    appName: 'fancy-app-test'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

# if running app service in docker mode, after pushing docker image the app service must be restarted using hooks or following task
#                - task: AzureAppServiceManage@0
#                  inputs:
#                    azureSubscription: ${{ variables['azureSubscription'] }}
#                    action: 'Restart Azure App Service'
#                    webAppName: 'fancy-app-test'
